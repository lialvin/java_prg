<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
            http://www.springframework.org/schema/beans/spring-beans-4.1.xsd  
            http://www.springframework.org/schema/context  
            http://www.springframework.org/schema/context/spring-context-4.1.xsd  
        ">  
  
    <!--引入配置属性文件 -->  
    <context:property-placeholder location="classpath*:/applicationConfig.properties" />  
    <!--扫描org.andy.work下文件，自动注入dao,entity,service为bean -->  
    <context:component-scan base-package="qitown.sprmvc.shop.dao.Impl,qitown.sprmvc.shop.service.Impl" />  
  
     <!-- 配置数据源 -->
     <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
         <property name="url" value="${jdbc.url}" />
         <property name="username" value="${jdbc.username}" />
         <property name="password" value="${jdbc.password}" />
 
         <!-- 初始化连接大小 -->
         <property name="initialSize" value="0" />
         <!-- 连接池最大使用连接数量 -->
         <property name="maxActive" value="20" />
         <!-- 连接池最大空闲 -->
         <property name="maxIdle" value="20" />
         <!-- 连接池最小空闲 -->
         <property name="minIdle" value="0" />
         <!-- 获取连接最大等待时间 -->
         <property name="maxWait" value="60000" />
 
         <!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->
 
         <property name="validationQuery" value="${validationQuery}" />
         <property name="testOnBorrow" value="false" />
         <property name="testOnReturn" value="false" />
         <property name="testWhileIdle" value="true" />
 
         <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name="timeBetweenEvictionRunsMillis" value="60000" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name="minEvictableIdleTimeMillis" value="25200000" />
 
         <!-- 打开removeAbandoned功能 -->
         <property name="removeAbandoned" value="true" />
         <!-- 1800秒，也就是30分钟 -->
         <property name="removeAbandonedTimeout" value="1800" />
         <!-- 关闭abanded连接时输出错误日志 -->
         <property name="logAbandoned" value="true" />
 
         <!-- 监控数据库 -->
         <!-- <property name="filters" value="stat" /> -->
         <property name="filters" value="mergeStat" />
     </bean>
     
    
    <!-- spring jdbc -->  
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
  
    <bean id="namedParameterJdbcTemplate"  
        class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">  
        <constructor-arg ref="dataSource" />  
    </bean>  
  
    <!-- 配置事务管理 -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
  
    <!-- 声明式事务，事务拦截器 -->  
    <bean id="transactionInterceptor"  
        class="org.springframework.transaction.interceptor.TransactionInterceptor">  
        <property name="transactionManager" ref="transactionManager" />  
        <!-- 配置事务属性 -->  
        <property name="transactionAttributes">  
            <!--下面定义事务传播属性 -->  
            <props>  
                <prop key="save*">PROPAGATION_REQUIRED</prop>  
                <prop key="del*">PROPAGATION_REQUIRED</prop>  
                <prop key="update">PROPAGATION_REQUIRED</prop>  
                  
                <prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>  
                <prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>  
                <prop key="*">PROPAGATION_REQUIRED</prop>  
            </props>  
        </property>  
    </bean>  
  
    <!-- Bean后处理器BeanNameAutoProxyCreator，根据List配置创建事务代理 -->  
    <bean  
        class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">  
        <!-- 下面是所有需要自动创建事务代理的bean -->  
        <property name="beanNames">  
            <list>  
                <value>*Service</value>  
            </list>  
        </property>  
        <!-- 下面定义BeanNameAutoProxyCreator所需的事务拦截器 -->  
        <property name="interceptorNames">  
            <list>  
                <value>transactionInterceptor</value>  
            </list>  
        </property>  
    </bean>  
  
</beans>  